%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Cycle Theory Computation
%%
%% Neophytos Demetriou (nkd@ucy.ac.cy)
%%
%% This software is licensed under the Gnu Public License.
%%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



:- multifile rule/3, complement/2, ec_user_p/2, executed/2, action/4,goal/3,failed/1.


complement(step(X, _), step(Y,_)) :-
	istransition(X),
	istransition(Y),
	X \= Y.


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% BASIC PART: determines the basic steps of operation by specifying the
%% allowed unitary cycle-steps from one transition to another.
%%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% Goal Introduction (GI) revises the top-level goals of the computee (and
%% accordingly the rest of the goal set) given the information from the goal
%% decision capability which decides the goals the computee should focus on
%% depending on its current circumstances. This transition revises also the
%% current plan of the computee, in order to keep only actions which are
%% relevant to the goals in the new set of goals.

rule(step('GI', []), step('GI', []), []) :- ec('GI', []).



%% Plan Introduction (PI) revises the state of the computee by updating the
%% current set of goals and the current plan in order to take into account new
%% plans for the goals selected for planning. These new plans are provided by
%% the planning capability.

rule(step('PI', Gs), step('PI', Gs), []) :- ec('PI', Gs).



%% Reactivity (RE) revises the current state according to the results of the
%% reactivity capability, which determines goals and actions deriving from the
%% reactive constraints. 

rule(step('RE', []), step('RE', []), []) :- ec('RE', []).



%% Sensing Introduction (SI) allows a computee to explicitly add to its current
%% plan a set of sensing actions in order to check whether or not some 
%% preconditions of other actions in its current plan are satisfied.

rule(step('SI', Fs), step('SI', Fs), []) :- ec('SI', Fs).



%% Active Observation (AO) allows the computee to update its current knowledge
%% base by possibly adding new observations from the environment. Differently
%% from PO (see below), however, the computee is deliberately looking for some
%% properties to hold in the environment.

rule(step('AO', Fs), step('AO', Fs), []) :- ec('AO', Fs).



%% Action Execution (AE) is the transition which caters for actually performing
%% actions in plans. Its effect amounts at recording in KB_0 the fact that
%% certain actions have been executed and, in the case of sensing actions, the
%% effect of sensing.

rule(step('AE', As), step('AE', As), []) :- ec('AE', As).



%% Goal Revision (GR) caters for revising the state by keeping only those goals
%% which are still worth achieving.

rule(step('GR', []), step('GR', []), []) :- ec('GR', []).



%% Plan Revision (PR) caters for revising the state by keeping only those
%% actions in the plan which are still relevant and which can still be 
%% executed.

rule(step('PR', []), step('PR', []), []) :- ec('PR', []).



%% Passive Observation (PO) updates the current knowledge base of the computee
%% by adding new observed facts which derive from changes in the environment.
%% A passive observation may be seen as the reaction of the computee to some
%% (unexpected or unpredictable) event (e.g. an interrupt) which happens in the
%% environment. The transition allows the computee to passively absorb or
%% incorporate the observable effects of these events (interrupts) into its
%% knowledge base.

%% NO CYCLE STEP AVAILABLE. TRIGGERED BY THE ENVIRONMENT.








%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% CORE SELECTION FUNCTIONS: They are fixed in the model and only select goals
%% (for goal selection) and actions (for action selections), preconditions
%% (for precondition selection) and fluents (for fluent selection) that still
%% have a chance of "success" (that have not become invalid in some way).
%%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


c_AS(As) :-
	findall(A, c_AS_p(A), As).

c_AS_p(action(Op, ParentGoal, PCs, TCs)) :-
	action(Op, ParentGoal, PCs, TCs),
	computee::get(timepoint(T)). /**********,
	valid_temporal_constraints(T,TCs),
	get_ancestors_eq(ParentGoal, Ancestors),
	goal_labels_to_fluents(Ancestors, AncestorFluents),
	forall(member(AncestorFluent, AncestorFluents),\+ computee::tr([AncestorFluent])),
	forall((member(PC, PCs), contrary_fluent(PC,NegPC)), \+ computee::tr([NegPC])).
************/
        %% c_AS_p: Moreover, we need to check that there are no goal siblings
	%% or goals that have a common ancestor (except of nil) with the given
        %% action without existance of a plan. Since there is no obvious way
        %% to do this based on D4's specification and given the fact that this 
        %% is only an optimization, it is omitted for now (July 31, 2003).


c_GS(Gs) :-
	findall(G, c_GS_p(G), Gs).

c_GS_p(goal(Goal, ParentGoal, TCs)) :-
	goal(Goal, ParentGoal, TCs),
	computee::get(timepoint(T)),
	valid_temporal_constraints(T, TCs),
	get_ancestors_eq(ParentGoal, Ancestors),
	goal_labels_to_fluents(Ancestors,AncestorFluents),
	forall(member(AncestorFluent, AncestorFluents),\+ computee::tr([AncestorFluent])).

        %% c_GS_p: Moreover, we need to check that there are no goal siblings
	%% or goals that have a common ancestor (except of nil) with the given
        %% given without existance of a plan. Since there is no obvious way
        %% to do this based on D4's specification and given the fact that this 
        %% is only an optimization, it is omitted for now (July 31, 2003).
	%% Condition 4 is also omitted -- why plan while selecting the goals
	%% for the input of the PI transition?
	

c_FS(Fs) :-
	findall(F, c_FS_p(F), Fs).

c_FS_p(F) :-
	computee::get(epsilon(E)),
	computee::get(timepoint(T)),
	executed(A,ActionTimepoint),
	(initiates(A,F) ; terminates(A,F)),
	ActionTimepoint > T-E,
	ActionTimepoint < T.


c_PS(PCs) :-
	findall(PC, c_PS_p(PC), PCs).

c_PS_p(PC) :-
	c_AS(As),
	member(A,As),
	A = action(Op,Goal,PCs,_),
	findall(C, (member(C, PCs), c_PS_aux_p(C)), Cs),
	PC = precond(Cs, Goal).

c_PS_aux_p(C) :-
	\+ computee::tr(C).



%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% HEURISTIC SELECTION FUNCTIONS: Requirements added to the requirements posed
%% by the core selection functions. Namely, the set of items selected by the
%% heuristic functions are (possibly proper) subsets of the sets of items
%% selected by the core selection functions.
%%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% Heuristic action selection

h_AS(As) :-
	h_u_AS(As).

h_AS(As) :-
	h_pre_AS(As).

h_AS(As) :-
	c_AS(All_As),
	h_fail_AS(Failed_As),
	difference(All_As,Failed_As,As).

h_AS(As) :-
	h_pre_AS(As).

h_As(As) :-
	computee::get(timepoint(T1)),
	T0 is T1 - 1,
	computee::history(T0, step('AE',Prev_As)),
	h_sp_AS(As,Prev_As).



%% Heuristic goal selection

h_GS(Gs) :-
	h_u_GS(Gs).


h_GS(Gs) :-
	computee::get(timepoint(T1)),
	T0 is T1 - 1,
	computee::history(T0, step('AE',Prev_As)),
	h_sp_GS(Gs, Prev_As).


% FIX ME: MORE INFO ABOUT THE LAST CONDITION FOR THE HEURISTIC GOAL SELECTION


%% Heuristic fluent selection

% FIX ME: MORE INFO ABOUT THE CONDITION FOR THE HEURISTIC FLUENT SELECTION



%% this section needs a lot of polishing.

h_sp_AS(As,Prev_As) :- 
	findall(A, h_sp_AS_aux(A,Prev_As), As).

h_sp_AS_aux(action(Op1, PG, [], T1),Prev_As) :-
	computee::get(timepoint(T1)),
	T0 is T1 - 1,
	member(action(Op0, PG, [], T0), Prev_As),
	action(Op1, PG, [], T1).

h_fail_AS(As) :-
	A = action(Op,_,_,_),
	member(A,As),
	failed(Op).

h_pre_AS(_).

%% Auxilliary predicates for the heuristic selection functions

h_u_AS(As) :-
	findall(action(Op,ParentGoal,PCs, T), (action(Op,ParentGoal,PCs,T),computee::get(timepoint(T))), As).


h_u_GS(Gs) :-
	computee::get(timepoint(T)),
	findall(goal(Goal,ParentGoal,T), goal(Goal,ParentGoal,T), Gs).

%% FIX ME
h_u_FS(Fs) :-
	findall(fluent(F,T), (executed(A,T0), T1 is T0 +1, computee::get(timepoint(T1)), (initiates(A,F);terminates(A,F))), Fs).


nothing_urgent_or_to_be_sensed :-
        h_u_AS(As), As = [],
        h_u_GS(Gs), Gs = [],
        h_u_FS(Fs), Fs = [].



%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% ENABLING CONDITIONS: They determine when a cycle step from one transition
%% to another is allowed or enabled.
%%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Hardcoded enabling conditions

ec('GI',[]) :-                     ec_aux_p('GI',[]).
ec('PI',Gs) :- c_GS(Gs), Gs \= [], ec_aux_p('PI',Gs).
ec('RE',[]) :-                     ec_aux_p('RE',[]).
ec('SI',Ps) :- c_PS(Fs), Ps \= [], ec_aux_p('SI',Ps).
ec('AO',Fs) :- c_FS(Fs), Fs \= [], ec_aux_p('AO',Fs).
ec('AE',As) :- c_AS(As), As \= [], ec_aux_p('AE',As).
ec('GR',[]) :-                     ec_aux_p('GR',[]).
ec('PR',[]) :-                     ec_aux_p('PR',[]).



ec_aux_p(NAME,INPUT) :-
	computee::get(timepoint(T1)),
	T0 is T1 - 1,
	computee::history(T0, step(PREV_NAME,PREV_INPUT)),
	ec_user_p(PREV_NAME, PREV_INPUT, NAME, INPUT).


%% User-defined enabling conditions

ec_user_p(PREV_NAME,_,NAME,_) :-
	ec_user_p(PREV_NAME,NAME).

% ...a 'GI' transition can follow any transition whenever there are
%    no goals in the current state

ec_user_p(_, 'GI') :- c_GS([]), !.

%% ... 'PR' can follow anything.

% ...what might follow the initialization, i.e. the "initial" component

ec_user_p('INIT', 'GI').
ec_user_p('INIT', 'PI').


% ...what might follow an 'AE' transition, i.e. the "basic" component

ec_user_p('AE','PI').
ec_user_p('AE','AE').
ec_user_p('AE','AO').
ec_user_p('AE','PR').


% ...what might follow a 'PO' transition, i.e. the "interrupt" component

ec_user_p('PO','GI').
ec_user_p('PO','RE').
ec_user_p('PO','GR').

% 'AE' is always qualified (provided a non-empty list of actions from c_AS/1 )

ec_user_p(_,'AE').



%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% PATTERNS AND PROFILES OF OPERATIONAL BEHAVIOUR: Letting the preference rules
%% be conditional on the current state of the computee opens up the possibility
%% to produce a variety of patterns of operation. The overall operational 
%% behaviour of the computee as given by generic cycle theories is thus
%% dynamic, depending on the particular circumstances under which the 
%% transitions are executed.
%% 
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% PUNCTUAL -- This is a pattern where a computee attempts to satisfy its goals
%% on time. It plans and executes its actions in order to achieve a timely
%% completion of its goals. Hence transitions for the completion of actions and
%% goals that are becoming relatively urgent are given preference over ones for
%% other goals and actions and over other operations of the computee.


rule(prefer('PUNCTUAL',step('AE',As),step(Z,X)), prefer(step('AE',As),step(Z,X)), []) :-
	computee::profile('PUNCTUAL'),
	h_u_AS(H_U_As).   %%% FIX ME: CHECK IF H_U_As is subset

rule(prefer('PUNCTUAL',step('PI',Gs),step(Z,X)), prefer(step('PI',Gs),step(Z,X)), []) :-
	computee::profile('PUNCTUAL'),
	h_u_GS(Gs).

rule(prefer('PUNCTUAL',step('AO',Fs),step(Z,X)), prefer(step('AO',Fs),step(Z,X)), []) :-
	computee::profile('PUNCTUAL'),
	h_u_FS(Fs).

rule(prefer('PUNCTUAL',step('PR',[]),step(Z,X)), prefer(step('PR',[]),step(Z,X)), []) :-
	computee::profile('PUNCTUAL'),
	nothing_urgent_or_to_be_sensed.


%% CAREFUL -- This is a pattern where when some failure occurs, e.g. some
%% action execution has timed out, then the computee prefers to reexamine its
%% current goals and plas before continuing with their further reduction and
%% execution. Hence the computee prefers to do revision transitions over the 
%% the other transitions in order to first let the effect of the failure
%% propagate in its current state.

rule(prefer('CAREFUL',step('PR',[]),step(Z,X)), prefer(step('PR',[]),step(Z,X)), []) :-
	computee::profile('CAREFUL'),
	istransition(Z),
	timeout.

timeout :-
	computee::get(timepoint(TC)),
	action(_, _, _, TA),
	TA < TC.


%% FOCUSED -- This is a pattern where once a computee has chosen a plan to 
%% execute prefers to continue with this plan (refining and/or executing
%% further) until the plan is finished or it has become invalid at which point
%% the computee can consider other plans or other goals, etc. Hence transitions
%% that relate to an existing plan have preference over transitions that relate
%% to other plans, e.g. transitions that introduce other plans.

rule(prefer('FOCUSED',step('AE',As),step(Z,X)), prefer(step('AE',As),step(Z,X)), []) :-
	computee::profile('FOCUSED'),
	computee::get(timepoint(T1)),
	T0 is T1 - 1,
	istransition(Z),
	computee::history(T0, step('AE',Prev_As)),
	c_AS(As),
	h_sp_AS(AsFIXME,Prev_As).


%% CAUTIOUS -- This is a pattern where the computee prefers not to attempt to
%% execute an action when it does not know that this can be done, i.e. it does
%% not know that its preconditions hold. It prefers to execute actions for
%% which it knows that the preconditions hold. Hence it would also prefer to do
%% a sensing introduction transition over an action execution transition.
%% Similarly, in a cautious pattern the computee would prefer to check that the
%% desired effects (in a plan) of an action hold after its execution.

rule(prefer('CAUTIOUS',step('SI',Fs),step('AE',As)), prefer(step('SI',Fs),step('AE',As)), []) :-
	computee::profile('CAUTIOUS'),
	computee::pre(As,Fs),
	Fs \= [].

rule(prefer('CAUTIOUS',step('AE',As),step(Z,X)), prefer(step('AE',As),step(Z,X)), []) :-
	computee::profile('CAUTIOUS'),
	istransition(Z),
	h_pre_AS(As).


%% IMPATIENT -- This is a pattern where whenever a computee finds out that an
%% existing action or plan is invalidated by the environment prefers to abandon
%% it. Hence it prefers to execute other plans for other goals or for the same
%% goal.

rule(prefer('IMPATIENT',step(Z,X),step('AE',As)), prefer(step(Z,X),step('AE',As)), []) :-
	computee::profile('IMPATIENT'),
	istransition(Z),
	Z \= 'AE',
	ec(Z,X),
	h_fail_AS(As).


%% NORMAL -- ASK TONY FOR THE PREFERENCE RULES OF THIS PATTERN, 
%% e.g. 'PI' follows 'GI' and so on.



%% PO follow-ups


rule(prefer('INTERRUPT',step('RE',[]),step(Z,X)), prefer(step('RE',[]),step(Z,X)), []) :-
	computee::get(timepoint(T1)),
	T0 is T1 - 1,
	computee::history(T0, step('PO', Input)),
	h_comm(Input).

h_comm(Input) :-
	member(observed(_,request(_,_),_), Input).


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Higher-Order Priorities
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% 'INTERRUPT' dominates any profile preference

rule(prefer(PREF1,PREF2), prefer(PREF1,PREF2), []) :-
	computee::get(timepoint(TC)),
	T0 is TC - 1,
	computee::history(T0, step('PO',_)),
	computee::profile(PROFILE),
	PREF1 = prefer('INTERRUPT',STEP1,STEP2),
	PREF2 = prefer(PROFILE,STEP2,STEP1),
	isprofile(PROFILE).

% 'CAREFUL' dominates 'PUNCTUAL'

rule(prefer(PREF1,PREF2), prefer(PREF1,PREF2), []) :-
	computee::profile('PUNCTUAL'),
	computee::profile('CAREFUL'),
	PREF1 = prefer('CAREFUL',STEP1,STEP2),
	PREF2 = prefer('PUNCTUAL',STEP2,STEP1).
	


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% MOVE THIS TO SOME OTHER PLACE
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

contrary_fluent(holds(neg(L),T), holds(L,T)) :- !.
contrary_fluent(holds(L,T), holds(neg(L),T)).


goal_labels_to_fluents([],[]).
goal_labels_to_fluents([L|Ls], [Fluent|Fluents]) :-
	goal(L, _, _),
	goal_labels_to_fluents(Ls,Fluents).


%% FIX ME: USE THE ACTUAL PREDICATES, THIS IS ONLY HERE TO MAKE THE EXAMPLES WORK

get_ancestors_eq(nil, []).
valid_temporal_constraints(_,_).


%% Type predicates

istransition('GI').
istransition('PI').
istransition('RE').
istransition('SI').
istransition('PO').
istransition('AO').
istransition('AE').
istransition('GR').
istransition('PR').

isprofile('PUNCTUAL').
isprofile('CAREFUL').
isprofile('FOCUSED').
isprofile('IMPATIENT').
isprofile('CAUTIOUS').
