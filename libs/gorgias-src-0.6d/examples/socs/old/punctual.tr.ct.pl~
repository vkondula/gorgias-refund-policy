% ==================================================================== %
%                          Cycle Theory (Punctual or Timely)           %
% ==================================================================== %
% A cycle theory is viewed as a preference policy that will determine  %
% at each step the preferred next internal transition(s) to be         %
% executed. In effect, this policy ranks the various alternative       %
% transitions of the computee so that the most preferred can be chosen.%
% ==================================================================== %


:- compile('../../lib/gorgias').
:- compile('../../ext/lpwnf').


%abducible(at(tr(TR,A),T),[]) :- istransition(TR),isaction(A), istime(T).
%abducible(at(urgent(A),T),[]) :- isaction(A), istime(T).
abducible(ec(_,_,T,A), []) :- isaction(A), istime(T).
abducible(time_out(_),[]).
abducible(neg(X), []) :- abducible(X, []).



%% Basic Part of the cycle theory starting from a current action execution transition.

rule(r('AE','AE',A,T2), at(tr('AE',A),T2), [at(tr('AE',A1),T1), ec('AE','AE',T2,A)]) :- isaction(A1), isaction(A), istime(T1), T2 is T1 + 1.
rule(r('AE','PI',G,T2), at(tr('PI',G),T2), [at(tr('AE',A1),T1), ec('AE','PI',T2,G)]) :- isaction(A1), isaction(G), istime(T1), T2 is T1 + 1.
rule(r('AE','AO',F,T2), at(tr('AO',F),T2), [at(tr('AE',A1),T1), ec('AE','AO',T2,F)]) :- isaction(A1), isaction(F), istime(T1), T2 is T1 + 1.
rule(r('AE','PR',A,T2), at(tr('PR',A),T2), [at(tr('AE',A1),T1)]) :- isaction(A),isaction(A1), istime(T1), T2 is T1 + 1.


%%%%% Punctual or Timely Behavior

rule(pr('AE','AE',Z,A), prefer(r('AE','AE',A,T),r('AE',Z,A,T)), [at(urgent(A),T)]) :- isaction(A),istransition(Z), Z \= 'AE'.
rule(pr('AE','PI',Z,A), prefer(r('AE','PI',A,T),r('AE',Z,A,T)), [at(urgent(A),T)]) :- isaction(A),istransition(Z), Z \= 'PI'.
rule(pr('AE','AO',Z,A), prefer(r('AE','AO',A,T),r('AE',Z,A,T)), [at(urgent(A),T)]) :- isaction(A),istransition(Z), Z \= 'AO'.
rule(pr('AE','PR',Z,A), prefer(r('AE','PR',A,T),r('AE',Z,A,T)), [neg(at(urgent(A),T))]) :- isaction(A),istransition(Z), Z \= 'PR'.


rule(f1, at(tr('AE',gardening),0), []).
rule(f2, neg(at(urgent(gardening),1)), []).

%%%%% Queries:
%% time(prove([at(tr(TR,gardening),1)],D)).
%% 14,869,072 inferences in 11.79 seconds (1261160 Lips)


%%%%% Careful Behavior

%rule(pr(X,'PR',Y,A), prefer(r(X,'PR',A, T),r(X,Y,A,T)), [time_out(A,T)]). 
%rule(f3, time_out(gardening,1), []).
% Queries: time(prove([at(tr(TR,gardening),1)],D).
% 14,019,718 inferences in 10.96 seconds (1279171 Lips)




%%%%% If we want to have a Plan Revision always followed by a Goal Revision 
%% rule(pr('PR','GR',Z,A), prefer(r('PR','GR',A,T),r('PR',Z,A,T)), []) :- istransition(Z).




%%%%% Focused Behavior ???
%% rule(pr('AE','AE',Z,A), prefer(r('AE','AE',A,T),r('AE',Z,A,T)), [same_plan]) :- isaction(A),istransition(Z), Z \= 'AE'.
%% rule(pr('AE','PI',Z,A), prefer(r('AE','PI',A,T),r('AE',Z,A,T)), [same_plan]) :- isaction(A),istransition(Z), Z \= 'PI'.





%%%%%
istime(T) :- member(T, [0,1,2,3,4,5,6,7,8,9]).
isaction(A) :- member(A, [gardening, holiday]).
istransition(Z) :- member(Z, ['AE','PI','AO','PR']).



pretty([]).
pretty([X|Xs]) :-
	writeln(X),
	pretty(Xs).



%%
complement(at(tr(Tr1,A),T),at(tr(Tr2,A),T)) :- isaction(A), istransition(Tr1), istransition(Tr2),Tr1 \= Tr2.
