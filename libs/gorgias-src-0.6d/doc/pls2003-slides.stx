@title Argumentation with Abduction

@author Neophytos Demetriou

@author Antonis Kakas

@date July 02, 2003



==Introduction==

* Motivation: A framework that can form the basis for encoding adaptable 
  preference policies in the face of incomplete information from dynamic and 
  evolving environments.

* An integrated approach:

  - Argumentation for preference reasoning.

    Adaptability: Allows the strength of the arguments to be non static 
    depending on factors that can change and that themselves can form part of 
    the argumentative reasoning.

  - Abduction for reasoning under incomplete information.

    Robustness: Enables us to construct fully supported arguments even if 
    information that an argument needs maybe missing.

* Application Examples: Inheritance with Exceptions, Cycle Theories 



==Background==

* Argument: a set of sentences whose role is solely determined by its relations
  to other arguments.

* Abstract argumentation framework: a pair of a set of arguments and a binary 
  attacking relation between conflicting arguments.

* Admissibility: a set is admissible if it defends itself against each attack.

* LPwNF ([KMD94,DK95]): a concrete scheme of the abstract argumentation
  framework which uses explicit negation but does not contain negation as 
  failure in its object level language.

  - Formulae in the background logic of the LPwNF framework are defined as
    labelled rules of the form $label: l \leftarrow l_1, l_2, ..., l_n$
    where $l_1, l_2, ..., l_n$ are positive or explicit negative literals
    and $label$ is a functional term.

  - We have extended LPwNF in two ways: 
    (a) Generalized the attacking relation to be dynamic 
    (b) Integrated abduction.



==The attacking relation==

* An attacking relation is realized via:

  - Conflicting arguments, i.e. arguments that conclude a predicate with
    different negation status.

  - An irreflexive strength (or qualification) relation that specify the scope 
    of the conflict and the strength of the arguments. For example, "prefer
    monotonic rules."

* Priority relation (<): 

  - Encodes locally the relative strength of rules in the theory: $r<r'$ means
    that $r$ has lower priority than $r'$.

  - It can be reasoned, just like any other predicate, and thus it can be
    classified as either static or dynamic and first- or higher-order.


* Strength Relation via Priorities:

  $\phi \preceq_{DYN} \psi$ iff
  	$(\exists r \in \phi, r' \in \psi: \phi \vdash r' < r) \Rightarrow
  		(\exists r \in \phi, r' \in \psi: \psi  \vdash r < r')$



==Example: The Tweety Problem (Static Priorities)==

[:note:]

The canonical Tweety problem -- infering that Tweety can fly from the facts
that Tweety is a bird and that birds typically fly; and retracting that
conclusion upon discovering that Tweety is a penguin -- is formulated as
follows::

    [:lpwnf:]

       f_1: bird(tweety).
       f_2: penguin(tweety).
    r_1(X): fly(X) :- bird(X).
    r_2(X): neg(fly(X)) :- penguin(X).
    r_3(X): r_1(X) < r_2(X).
    

It is easy to verify that $\{f_2,r_2(tweety),r_3(tweety)\}$ is an admissible
set since its only conflicting argument $\{f_1,r_1(tweety)\}$ does not qualify
as an attack. Note, however, that $\{f_1,r_1(tweety)\}$ attacks 
$\{f_2,r_2(tweety)\}$ but when we include $r_3(tweety)$ in the latter it does
not.



==Example: Inheritance with Exceptions (Dynamic Priorities)==


"Inheritance Hierarchy":image,right:???

* An inheritance hierarchy consists of an acyclic graph representing the proper
  subclass relation between classes and a collection of properties of objects
  from these subclasses.

* Domain dependent axioms::

    [:lpwnf:]

    d_1(X): has(X,p) :- in(X,b).
    d_2(X): neg(has(X,p)) :- in(X,c).
    d_3(X): d_1(X) < d_2(X) :- in(X,c).

[:note:]

where $has(X,P)$ stands for "element X has property P", $in(X,C)$ stands
for "X is an instance of class C", and $subclass(A,B)$ stands for "class A 
is a subclass of class B."

* Domain independent axioms::

    [:lpwnf:]

    r_1(C_0,C_2): subclass(C_0,C_2) :- subclass(C_0,C_1), subclass(C_1,C_2).
      r_2(X,C_1): in(X,C_1) :- subclass(C_0,C_1), in(X,C_0).
        r_3(X,C): neg(in(X,C)).
        r_4(A,B): neg(subclass(A,B)).

  [:note:]

  the first two rules represent general properties of subclass and in. The
  last two rules express the closed world assumption for simple hierarchies.
  Remember: Show the facts from the figure. Included here for convenience::

    [:lpwnf:]

    f_1: subclass(a,b).
    f_2: subclass(c,b).
    f_3: subclass(d,b).
    f_4: in(x_1, a).
    f_5: in(x_2, c).
    f_6: in(x_3, d).

  Discuss admissible sets for has(x_1,p), has(x_2,p), has(x_3,p). 
  +++To be included.



==Example: Inheritance with Exceptions (Higher-Order Priorities)==

"Inheritance Hierarchy (extended)":image,right:???

Consider the program in the previous slide extended by::

   [:lpwnf:]

      f_7: subclass(d,a)
   d_4(X): d_2(X) < d_1(X) :- in(X,a).


* Now, both $d_1(X) < d_2(X)$ and $d_2(X) < d_1(X)$ hold for $x_3$ and thus
  both $has(x_3,p)$ and $\neg has(x_3,p)$ are consequences of the program. Two
  ways to resolve the conflict:

  - Rewrite the rules $d_3(X)$ and $d_4(X)$ as follows::

      [:lpwnf:]

      d_3'(X): d_1(X) < d_2(X) :- in(X,c), neg(in(X,a)).
      d_4'(X): d_2(X) < d_1(X) :- in(C,a), neg(in(X,c)).

   ==> this practice leads to compinatorial explosion on the number of
    literals required in the body of the priority rules and thus degrading
    the high-intentionality (high-level expressivity) of the language.

  - Higher-Order Priorities::

      [:lpwnf:]

      d_5(X): d_3(X) < d_4(X) :- in(X,a).

   [:note:] Show results in Gorgias after adding the last rule.



==Abduction==

* Abducibles: special type of predicates that express the incomplete 
  information of the given domain of discourse. 

* Given a goal, abduction extends the theory with ground abducibles so that it 
  can satisfy the goal.

* Strength Relation via Assumptions: 

  $\phi \preceq_{ABD} \psi$ iff 
  	$\alpha \in \psi$ for some 
		$\neg\alpha\in \phi$

* Strength Relation via Integrity Constraints:

  $\phi \preceq_{IC} \psi$ iff 
	$\psi \vdash \alpha$ for some 
		$\neg \alpha\in \phi$ and $\alpha \not \in \psi$



==Computing Argumentation with Abduction==

"An admissible Tree":image,right:???

* Construction of admissible trees via derivation of partial trees: Nodes are 
  sets of sentences labelled as 'attack' or 'defence'.

* The derivation is an interleaving of two phases (suppose $N$ is the selected 
  unmarked node in the current partial tree):

  (a) If $N$ is an attack node, choose a culprit $c$ in $N$ and a minimal 
  argument $D$ against c such that $D$ attacks $N$ with respect to some 
  strength relation. Then, $N$ is marked, $c$ is recorded as the culprit 
  of $N$, and $D$ is added as the unmarked defence node child of $N$.

  (b) If $N$ is a defence node that does not conclude a recorded culprit (for
  consistency), then $N$ is marked, the root is extended by $N$, and all
  minimal attacks against $N$ are added as additional unmarked attack nodes
  children of the root.


==Application Example: Cycle Theories==

* Goal Decision (Gardening)::

  [:lpwnf:]

  r_1: gardening :- weekend.
  r_2: holiday :- weekend, short_trip.
  r_3: work :- deadline.
  R_1: r_2 < r_1 :- gardening_season.
  R_2: r_1 < r_2 :- special_offer.
  R_3: r_1 < r_3 :- bonus_offer.
  R_4: R_1 < R_2 :- bank_holiday.


==Conclusions and Future Work==


[:todo:]

* Install SWI Prolog on Tony's laptop.

* Check examples and results with Gorgias on Tony's laptop.

* Remove CWA from the "Inheritance with Exceptions" examples.

* Admissible Tree Image

* Legal reasoning: demonstrates higher-order priorities, (not sure if it should go in)

* Give or Keep
